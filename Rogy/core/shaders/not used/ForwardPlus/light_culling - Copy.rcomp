
#define MAX_LIGHTS_PER_TILE 64

struct PointLight {
	vec4 color;
	vec4 position;
	vec4 paddingAndRadius;
};

struct VisibleIndex {
	int index;
};

// Shader storage buffer objects
layout(std430, binding = 0) readonly buffer LightBuffer {
	PointLight data[];
} lightBuffer;

layout(std430, binding = 1) writeonly buffer VisibleLightIndicesBuffer {
	VisibleIndex data[];
} visibleLightIndicesBuffer;

// Uniforms
uniform sampler2D depthMap;
uniform mat4 view;
uniform mat4 projection;
uniform ivec2 screenSize;
uniform int lightCount;

// Shared values between all the threads in the group
shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visibleLightCount;
shared vec4 frustumPlanes[6];
// Shared local storage for visible indices, will be written out to the global buffer at the end
shared int visibleLightIndices[MAX_LIGHTS_PER_TILE];
shared mat4 viewProjection;

// Took some light culling guidance from Dice's deferred renderer
// http://www.dice.se/news/directx-11-rendering-battlefield-3/

#define TILE_SIZE 16
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;
void main() {
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	// Initialize shared global values for depth and light count
	if (gl_LocalInvocationIndex == 0) {
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visibleLightCount = 0;
		viewProjection = projection * view;
	}

	barrier();

	// Step 1: Calculate the minimum and maximum depth values (from the depth buffer) for this group's tile
	float maxDepth, minDepth;
	vec2 text = vec2(location) / screenSize;
	float depth = texture(depthMap, text).r;
	// Linearize the depth value from depth buffer (must do this because we created it using projection)
	depth = (0.5 * projection[3][2]) / (depth + 0.5 * projection[2][2] - 0.5);

	// Convert depth to uint so we can do atomic min and max comparisons between the threads
	uint depthInt = floatBitsToUint(depth);
	atomicMin(minDepthInt, depthInt);
	atomicMax(maxDepthInt, depthInt);
	
	
	// Compute depth min and max of the workgroup
	/*vec2 screen_uv = gl_GlobalInvocationID.xy / screenSize;
	float depth = texture(depthMap, screen_uv).r;
	uint depth_uint = floatBitsToUint(depth);
	atomicMin(minDepthInt, depth_uint);
	atomicMax(minDepthInt, depth_uint);*/

	barrier();

	// Step 2: One thread should calculate the frustum planes to be used for this tile
	if (gl_LocalInvocationIndex == 0) {
		// Convert the min and max across the entire tile back to float
		minDepth = uintBitsToFloat(minDepthInt);
		maxDepth = uintBitsToFloat(maxDepthInt);

		// Steps based on tile sale
		vec2 negativeStep = (2.0 * vec2(tileID)) / vec2(tileNumber);
		vec2 positiveStep = (2.0 * vec2(tileID + ivec2(1, 1))) / vec2(tileNumber);

		// Set up starting values for planes using steps and min and max z values
		frustumPlanes[0] = vec4(1.0, 0.0, 0.0, 1.0 - negativeStep.x); // Left
		frustumPlanes[1] = vec4(-1.0, 0.0, 0.0, -1.0 + positiveStep.x); // Right
		frustumPlanes[2] = vec4(0.0, 1.0, 0.0, 1.0 - negativeStep.y); // Bottom
		frustumPlanes[3] = vec4(0.0, -1.0, 0.0, -1.0 + positiveStep.y); // Top
		frustumPlanes[4] = vec4(0.0, 0.0, -1.0, -minDepth); // Near
		frustumPlanes[5] = vec4(0.0, 0.0, 1.0, maxDepth); // Far

		// Transform the first four planes
		for (uint i = 0; i < 4; i++) {
			frustumPlanes[i] *= viewProjection;
			frustumPlanes[i] /= length(frustumPlanes[i].xyz);
		}

		// Transform the depth planes
		frustumPlanes[4] *= view;
		frustumPlanes[4] /= length(frustumPlanes[4].xyz);
		frustumPlanes[5] *= view;
		frustumPlanes[5] /= length(frustumPlanes[5].xyz);
	}
	
	// Compute Tile frustrum planes
	/*if (gl_LocalInvocationIndex == 0) {
		float min_group_depth = uintBitsToFloat(minDepthInt);
		float max_group_depth = uintBitsToFloat(maxDepthInt);

		vec4 vs_min_depth = (inverse(projection) * vec4(0.0, 0.0, (2.0 * min_group_depth - 1.0), 1.0));
		vec4 vs_max_depth = (inverse(projection) * vec4(0.0, 0.0, (2.0 * max_group_depth - 1.0), 1.0));
		vs_min_depth /= vs_min_depth.w;
		vs_max_depth /= vs_max_depth.w;
		min_group_depth = vs_min_depth.z;
		max_group_depth = vs_max_depth.z;

		vec2 tile_scale = vec2(screenSize) * (1.0 / float(2 * TILE_SIZE));
		vec2 tile_bias = tile_scale - vec2(gl_WorkGroupID.xy);

		vec4 col1 = vec4(-projection[0][0] * tile_scale.x, projection[0][1], tile_bias.x, projection[0][3]);
		vec4 col2 = vec4(projection[1][0], -projection[1][1] * tile_scale.y, tile_bias.y, projection[1][3]);
		vec4 col4 = vec4(projection[3][0], projection[3][1], -1.0, projection[3][3]);

		frustumPlanes[0] = col4 + col1;
		frustumPlanes[1] = col4 - col1;
		frustumPlanes[2] = col4 - col2;
		frustumPlanes[3] = col4 + col2;
		frustumPlanes[4] = vec4(0.0, 0.0, 1.0, -min_group_depth);
		frustumPlanes[5] = vec4(0.0, 0.0, -1.0, max_group_depth);
		for (uint i = 0; i < 4; i++) {
			frustumPlanes[i] *= 1.0f / length(frustumPlanes[i].xyz);
		}
	}
	*/
	barrier();

	// Step 3: Cull lights.
	// Parallelize the threads against the lights now.
	// Can handle 256 simultaniously. Anymore lights than that and additional passes are performed
	/*uint threadCount = TILE_SIZE * TILE_SIZE;
	uint passCount = (lightCount + threadCount - 1) / threadCount;
	for (uint i = 0; i < passCount; i++) {
		// Get the lightIndex to test for this thread / pass. If the index is >= light count, then this thread can stop testing lights
		uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
		if (lightIndex >= lightCount) {
			break;
		}

		vec4 position = lightBuffer.data[lightIndex].position;
		float radius = lightBuffer.data[lightIndex].paddingAndRadius.w;
	
		// We check if the light exists in our frustum
		float distance = 0.0;
		for (uint j = 0; j < 6; j++) {
			distance = dot(position, frustumPlanes[j]) + radius;

			// If one of the tests fails, then there is no intersection
			if (distance <= 0.0) {
				//break;
			}
		}

		// If greater than zero, then it is a visible light
		if (distance > 0.0) {
			// Add index to the shared array of visible indices
			uint offset = atomicAdd(visibleLightCount, 1);
			visibleLightIndices[offset] = int(lightIndex);
		}
	}
	*/
		// Cull lights
	uint thread_count = TILE_SIZE * TILE_SIZE;
	for (uint i = gl_LocalInvocationIndex; i < lightCount; i += thread_count) {
		PointLight light = lightBuffer.data[i];
		vec4 vs_light_pos = view * vec4(light.position);

		if (visibleLightCount < MAX_LIGHTS_PER_TILE) {
			//uint id = atomicAdd(visibleLightCount, 1);
			//visibleLightIndices[id] = int(i);
			bool inFrustum = true;
			for (uint j = 0; j < 6 && inFrustum; j++) {
				float d = dot(frustumPlanes[j], vs_light_pos);
				inFrustum = (d >= -light.paddingAndRadius.w);
			}
			if (inFrustum) {
				uint id = atomicAdd(visibleLightCount, 1);
				visibleLightIndices[id] = int(i);
			}
		}
	}
	
	barrier();

	// One thread should fill the global light buffer
	if (gl_LocalInvocationIndex == 0) {
		uint offset = index * MAX_LIGHTS_PER_TILE; // Determine bosition in global buffer
		for (uint i = 0; i < visibleLightCount; i++) {
			visibleLightIndicesBuffer.data[offset + i].index = visibleLightIndices[i];
		}

		if (visibleLightCount != MAX_LIGHTS_PER_TILE) {
			// Unless we have totally filled the entire array, mark it's end with -1
			// Final shader step will use this to determine where to stop (without having to pass the light count)
			visibleLightIndicesBuffer.data[offset + visibleLightCount].index = -1;
		}
	}
}